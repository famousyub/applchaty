// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entities/user_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2615849165180211100),
      name: 'User',
      lastPropertyId: const IdUid(12, 3658730151871575887),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7811981053046264738),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 460925388898305108),
            name: 'uuid',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 3726513231544593533)),
        ModelProperty(
            id: const IdUid(3, 1051594493546628434),
            name: 'profileUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3047138253432917627),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6978224673366826745),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5607208809715885371),
            name: 'profession',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4326767035392195068),
            name: 'bio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7543853631925889160),
            name: 'jwtToken',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5743605918814860689),
            name: 'refreshToken',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3498145360230258403),
            name: 'exp',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6365402944894182904),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3658730151871575887),
            name: 'isLoggedIn',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 2615849165180211100),
      lastIndexId: const IdUid(1, 3726513231544593533),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final profileUrlOffset = object.profileUrl == null
              ? null
              : fbb.writeString(object.profileUrl!);
          final nameOffset = fbb.writeString(object.name);
          final mobileOffset =
              object.mobile == null ? null : fbb.writeString(object.mobile!);
          final professionOffset = object.profession == null
              ? null
              : fbb.writeString(object.profession!);
          final bioOffset =
              object.bio == null ? null : fbb.writeString(object.bio!);
          final jwtTokenOffset = object.jwtToken == null
              ? null
              : fbb.writeString(object.jwtToken!);
          final refreshTokenOffset = object.refreshToken == null
              ? null
              : fbb.writeString(object.refreshToken!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, profileUrlOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, mobileOffset);
          fbb.addOffset(5, professionOffset);
          fbb.addOffset(6, bioOffset);
          fbb.addOffset(7, jwtTokenOffset);
          fbb.addOffset(8, refreshTokenOffset);
          fbb.addInt64(9, object.exp);
          fbb.addOffset(10, emailOffset);
          fbb.addInt64(11, object.isLoggedIn);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              bio: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              profession: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              mobile: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              exp: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 22),
              jwtToken: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              refreshToken: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              profileUrl:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 8),
              uuid: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 6, ''),
              isLoggedIn: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26),
              email: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.uuid]
  static final uuid = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.profileUrl]
  static final profileUrl =
      QueryStringProperty<User>(_entities[0].properties[2]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[0].properties[3]);

  /// see [User.mobile]
  static final mobile = QueryStringProperty<User>(_entities[0].properties[4]);

  /// see [User.profession]
  static final profession =
      QueryStringProperty<User>(_entities[0].properties[5]);

  /// see [User.bio]
  static final bio = QueryStringProperty<User>(_entities[0].properties[6]);

  /// see [User.jwtToken]
  static final jwtToken = QueryStringProperty<User>(_entities[0].properties[7]);

  /// see [User.refreshToken]
  static final refreshToken =
      QueryStringProperty<User>(_entities[0].properties[8]);

  /// see [User.exp]
  static final exp = QueryIntegerProperty<User>(_entities[0].properties[9]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[0].properties[10]);

  /// see [User.isLoggedIn]
  static final isLoggedIn =
      QueryIntegerProperty<User>(_entities[0].properties[11]);
}
